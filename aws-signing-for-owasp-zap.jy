# AWS Signing Script for OWASP Zed Attack Proxy - ZAP
# HelpAddOn Script - HTTPSender
# Ismael Goncalves - https://sharingsec.blogspot.com
# https://github.com/irgoncalves
#
# Tested with Jython 2.5.4 and ZAP 2.7.0
# For AWS Signing Process (aws4): https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#                                 Based On:
#                                 https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html
#
#


import sys, time, hashlib, hmac, urlparse, urllib

def sign(key, msg):
    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()

def getSignatureKey(key, dateStamp, regionName, serviceName):
    kDate = sign(('AWS4' + key).encode('utf-8'), dateStamp)
    kRegion = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, 'aws4_request')
    return kSigning

# access and secret key for AWS
access_key = 'myacecsskey'
secret_key = 'mysecretkey'

# token for x-amz-security-token - leave blank if it is not necessary
# when used wth temporaty access/secret keys it must be sent
token = 'AgoGb3JpZ2luEHkaCXVzLWVhc3QtMSKAAgXvTKUy5/eJ116uyaXYwh6whPxK7tRWnRvVMzdqPdAul375Bvak0j57Tsxn10o0a8kWdy87Pg5ZqxrzPhatFjW/erAj6EDz0sdKTITXLkcnf122CxJB0jSaHihAIIlDxN+oEQEI7/1+v81uw3LmHp2eaSchh1kaF683L93CBsTkVEx9g2MMkLj4bLO/WWN5Ktzq4bUEa7IneYTOt0prgfxK1Seg+ydx0bVkeNr5xidUH/JnmYnWcFAOjXewl+81NLRcVRJOSiOI8nlZuT+qhG/cUFFOeqtcpxOzFUiOqcX7NuCbVuH3iGcw7oK6lTkMXE/fSRYg8jYQIiuF3TTrZ0cqpgUIHhAAGgwzMzI5MjE2NzY0NjgiDOSVMZzGtQ0dBCG+WSqDBfm2bDwljgK61IxVXfEc/STxek0fa9ZpP8tjNRYawd+00KzXWITTrfO9hINMR6Bf7kO1PXNDYGueR01RJ4i0EilGQ63rL9IjtctErXBmgN9D9nZyEsGv7GHiVQ4+Y4RPQXccA8rKoN8/QYPXLi3t1YIrVXmMkDRbuDyRpJne6NMHl2nZsKM3sFkFNbRJ5E2qafVI3MXi87UNhNtr+hVnmB0hsX5eTLU2WGil8T9Yk9LfktQPD3ouWIae+1L1CoebXrRVKCaAm+4R0zpusdm0OYZcueyBgZEu2qt2nla5QxDA+KFOxhK6mK2f2U3Y2m5t1jW+Hx0a/RZtRjNlH8oClayy1GUQob5dWqnB5Ci4mM1iNBWirTl3IKe4cWGN+wZcBxqZrrVhIubbKiTFdbbX7ULxWU0TXf/a4mbspxYqOPvaoAW2koRsJVp7x8i2p4zXEP0LiShkfcGBHWhsqjlLTby8IOC1d7uxQ3mbYYw2JONFnvMLB7fri3NTpdXKPemlC9qseRIuEZKhfDJ1qYP0vNZV8R/qFgOUVQ8YMzx2JB44c7aaKfECNf7Xy/KTeZFgVkFcQNNHTp6YIsAaEscdtvsFTElOb8DMlw5q/ytK32wfaDgQL02qfBfidaJ3MZQYOBI79UWsq53qRw0D6e5g8ScTzsuuK+z8TpLeAlOdrXogfgcscpJ47/sM7LNgdKB1WJKXV2J5AAei1OUXW64xFQIgeG8UXSefJsIJSiGhXIODZzISkXJasRukU59wsNValxgtZ5X4EEpAkn7lj/gk8wyp/1XihKJ7I7xoo0BsdBucoz4eD7OQ1el1iW5e44mhwbDAK1SCqkwApq+tXI6n6vnd9oAwkKff0gU='

amzdate = time.strftime('%Y%m%dT%H%M%SZ',time.gmtime())
datestamp = time.strftime('%Y%m%d',time.gmtime())

def sendingRequest(msg, initiator, helper): 

   parsedurl = urlparse.urlparse(msg.getRequestHeader().getURI().toString())
   canonical_uri = urllib.quote(parsedurl.path if parsedurl.path else '/', safe='/-_.~')
   method = msg.getRequestHeader().getMethod()   
   service = 'execute-api'
   host = msg.getRequestHeader().getHostName()
   region = 'us-east-1'
   canonical_querystring = ''
   
   # replace any + * from ZAP Payloads with %20 - + breaks signature
   query = parsedurl.query.replace('+', '%20')
   query = query.replace('*', '%2A') 

   # sort parameters
   #querystring_sorted = '&'.join(sorted(parsedurl.query.split('&')))

   querystring_sorted = '&'.join(sorted(query.split('&')))
      
   if querystring_sorted != '':
      for query_param in querystring_sorted.split('&'):
         key_val_split = query_param.split('=', 1)
   
         key = key_val_split[0]
         if len(key_val_split) > 1:
            val = key_val_split[1]
         else:
            val = ''
         
         if key:
            if canonical_querystring:
               canonical_querystring += "&"
            canonical_querystring += u'='.join([key, val])
   

   canonical_headers = 'host:' + host + '\n' + 'x-amz-date:' + amzdate + '\n'
   signed_headers = 'host;x-amz-date'
   payload = msg.getRequestBody().toString();
   payload_hash = hashlib.sha256(payload).hexdigest()
   canonical_request = method + '\n' + canonical_uri + '\n' + canonical_querystring + '\n' + canonical_headers + '\n' + signed_headers + '\n' + payload_hash
   algorithm = 'AWS4-HMAC-SHA256'
   credential_scope = datestamp + '/' + region + '/' + service + '/' + 'aws4_request'
   string_to_sign = algorithm + '\n' +  amzdate + '\n' +  credential_scope + '\n' +  hashlib.sha256(canonical_request).hexdigest()
   signing_key = getSignatureKey(secret_key, datestamp, region, service)
   signature = hmac.new(signing_key, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()
   authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + credential_scope + ', ' +  'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + signature
   
   headers = {'x-amz-date':amzdate, 'Authorization':authorization_header}
   
   # check if token is necessary
   if token != '':
      headers.update({'x-amz-security-token':token})

   for x in list(headers):
      msg.getRequestHeader().setHeader(x, headers[x]);
   
def responseReceived(msg, initiator, helper): 
    pass;